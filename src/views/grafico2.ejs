<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Gráficos de Control Individual</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body {
      padding: 20px;
      font-family: Arial, sans-serif;
      margin: 0;
      position: relative;
    }

    .back-button {
      position: fixed;
      top: 20px;
      right: 20px;
      background-color: #007BFF;
      color: white;
      border: none;
      border-radius: 50px;
      padding: 10px 16px;
      font-size: 14px;
      cursor: pointer;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);
      z-index: 1000;
      text-decoration: none;
    }

    .back-button:hover {
      background-color: #0056b3;
    }

    .filter-container {
      margin-bottom: 20px;
    }
    
    .chart-container {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      margin-bottom: 30px;
    }
    
    .vertical-charts {
      flex: 2;
      min-width: 600px;
      display: flex;
      flex-direction: column;
      gap: 20px;
    }
    
    .horizontal-chart {
      flex: 1;
      min-width: 400px;
      height: calc(100% - 40px);
    }
    
    canvas {
      width: 100%;
      height: 100%;
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .chart-wrapper {
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      padding: 15px;
      height: 350px;
    }
    
    .histogram-wrapper {
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      padding: 15px;
      height: calc(700px + 20px);
    }
    
    h2 {
      margin-top: 0;
      color: #333;
    }
    
    select {
      padding: 8px 12px;
      border-radius: 4px;
      border: 1px solid #ddd;
      margin-right: 10px;
      min-width: 200px;
    }
    
    label {
      font-weight: bold;
      margin-right: 5px;
    }
    
    .legend {
      margin: 15px 0;
      padding: 10px 15px;
      border: 1px solid #ddd;
      background-color: #f9f9f9;
      border-radius: 4px;
    }
    
    .legend-item {
      display: inline-block;
      margin-right: 20px;
      font-size: 14px;
    }
    
    .legend-color {
      display: inline-block;
      width: 15px;
      height: 15px;
      margin-right: 5px;
      vertical-align: middle;
      border-radius: 50%;
    }
    
    @media (max-width: 1200px) {
      .chart-container {
        flex-direction: column;
      }
      
      .histogram-wrapper {
        height: 400px;
      }
    }
  </style>
</head>
<body>

  <a href="/" class="back-button">← Volver</a>
</head>
<body>

  <div class="filter-container">
    <h2>Filtrar por Número de Parte y Revisión</h2>
    <form method="GET" action="/grafico2">
      <label for="pa6">Número de Parte:</label>
      <select name="pa6" id="pa6" required onchange="this.form.submit()">
        <option value="">-- Seleccione --</option>
        <% 
          const pa6Unicos = [...new Set(partes.map(p => p.pa6))];
          pa6Unicos.forEach(p => { 
        %>
          <option value="<%= p %>" <%= p === pa6 ? 'selected' : '' %>><%= p %></option>
        <% }) %>
      </select>
  
      <% if (pa6) { %>
        <label for="pa7">Revisión:</label>
        <select name="pa7" id="pa7" required onchange="this.form.submit()">
          <option value="">-- Seleccione --</option>
          <% 
            const revUnicas = [...new Set(partes.filter(p => p.pa6 === pa6).map(p => p.pa7 || 'N/A'))];
            revUnicas.forEach(rev => {
          %>
            <option value="<%= rev %>" <%= rev === pa7 ? 'selected' : '' %>><%= rev %></option>
          <% }) %>
        </select>
      <% } %>
    </form>
  </div>
  
  <% if (datosIndividuales.length === 0) { %>
    <p>No hay datos para mostrar con los filtros seleccionados.</p>
  <% } else { %>
  

    <div class="legend">
      <h3>Leyenda de Reglas Violadas:</h3>
      <div class="legend-item"><span class="legend-color" style="background-color: red;"></span>1 - Punto fuera de límites</div>
      <div class="legend-item"><span class="legend-color" style="background-color: rgb(217, 255, 0);"></span>2 - 7 puntos consecutivos mismo lado</div>
      <div class="legend-item"><span class="legend-color" style="background-color: rgb(214, 87, 151);"></span>3 - 14 puntos alternando lados</div>
    </div>

    <div class="chart-container">
      <div class="vertical-charts">
        <div class="chart-wrapper">
          <h2>Gráfico de Valores Individuales (I)</h2>
          <canvas id="individualChart"></canvas>
        </div>
        
        <div class="chart-wrapper">
          <h2>Gráfico de Rangos Móviles (MR)</h2>
          <canvas id="mrChart"></canvas>
        </div>
      </div>
      
      <div class="horizontal-chart">
        <div class="histogram-wrapper">
          <h2>Histograma de Valores</h2>
          <canvas id="histogramChart"></canvas>
        </div>
      </div>
    </div>
    <div style="border: 1px solid #aaa; border-radius: 8px; padding: 12px; margin-top: 20px; font-size: 12pt; max-width: 400px; background-color: #f8f8f8;">
      <h3>Datos Estadísticos Calculados</h3>
      <ul style="list-style-type: none; padding-left: 0;">
        <li><strong>Media:</strong> <%= estadisticas.media?.toFixed(3) || 'N/A' %></li>
        <li><strong>Límite Superior de Control (LSC):</strong> <%= estadisticas.lsc?.toFixed(3) || 'N/A' %></li>
        <li><strong>Límite Inferior de Control (LIC):</strong> <%= estadisticas.lic?.toFixed(3) || 'N/A' %></li>
        <li><strong>Desviación Estándar:</strong> <%= estadisticas.desviacion?.toFixed(3) || 'N/A' %></li>
       
      </ul>
    </div>
    
    <script>
      const datosIndividuales = <%- JSON.stringify(datosIndividuales) %>;
      const rangosMoviles = <%- JSON.stringify(rangosMoviles) %>;
      const reglasVioladas = <%- JSON.stringify(reglasVioladas) %>;
      const labels = datosIndividuales.map((_, i) => i + 1);
      const limites = <%- JSON.stringify(limites) %>;

      // Función para crear líneas de control
      const linea = (valor, label, color) => ({
        label,
        data: Array(labels.length).fill(valor),
        borderColor: color,
        borderWidth: 1,
        borderDash: [5, 5],
        pointRadius: 0
      });

      // Configuración de puntos para reglas violadas con colores específicos
      const getPointColor = (index) => {
        switch(reglasVioladas[index]) {
          case 1: return 'red'; // Puntos fuera de límites
          case 2: return 'rgb(217, 255, 0)'; // 4 puntos mismo lado
          case 3: return 'rgb(214, 87, 151)'; // 8 puntos alternando
          default: return 'rgba(0, 0, 0, 0.8)'; // Color normal
        }
      };
      
      const getPointRadius = (index) => reglasVioladas[index] > 0 ? 5 : 3;
      
      const getPointLabel = (index) => {
        const regla = reglasVioladas[index];
        if (!regla) return '';
        const reglasText = {
          1: 'Punto fuera de límites de control',
          2: '4 puntos consecutivos del mismo lado de la media',
          3: '8 puntos consecutivos alternando lados de la media'
        };
        return `Regla ${regla} violada: ${reglasText[regla]}`;
      };

      // 1. Gráfico de Valores Individuales (I)
      new Chart(document.getElementById('individualChart'), {
        type: 'line',
        data: {
          labels,
          datasets: [
            {
              label: 'Valores Individuales',
              data: datosIndividuales,
              borderColor: 'rgba(0, 0, 0, 0.8)',
              backgroundColor: 'rgba(0, 0, 0, 0.1)',
              tension: 0.1,
              pointBackgroundColor: datosIndividuales.map((_, i) => getPointColor(i)),
              pointBorderColor: datosIndividuales.map((_, i) => getPointColor(i)),
              pointRadius: datosIndividuales.map((_, i) => getPointRadius(i)),
              pointHoverRadius: datosIndividuales.map((_, i) => getPointRadius(i) + 2),
              fill: true
            },
            linea(limites.i.superior, 'LSC', 'red'),
            linea(limites.i.central, 'LC', 'blue'),
            linea(limites.i.inferior, 'LIC', 'red')
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: false,
              title: {
                display: true,
                text: 'Valor'
              }
            },
            x: {
              title: {
                display: true,
                text: 'Muestra'
              }
            }
          },
          plugins: {
            tooltip: {
              callbacks: {
                afterLabel: (context) => getPointLabel(context.dataIndex)
              }
            },
            legend: {
              position: 'top',
              labels: {
                usePointStyle: true,
                pointStyle: 'circle'
              }
            }
          }
        }
      });

      // 2. Gráfico de Rangos Móviles (MR)
      new Chart(document.getElementById('mrChart'), {
        type: 'line',
        data: {
          labels: labels.slice(1),
          datasets: [
            {
              label: 'Rangos Móviles',
              data: rangosMoviles,
              borderColor: 'rgba(0, 0, 0, 0.8)',
              backgroundColor: 'rgba(0, 0, 0, 0.1)',
              tension: 0.1,
              pointRadius: 3,
              fill: true
            },
            linea(limites.mr.superior, 'LSC', 'red'),
            linea(limites.mr.central, 'LC', 'blue'),
            linea(limites.mr.inferior, 'LIC', 'red')
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: false,
              title: {
                display: true,
                text: 'Rango'
              }
            },
            x: {
              title: {
                display: true,
                text: 'Muestra'
              }
            }
          },
          plugins: {
            legend: {
              position: 'top'
            }
          }
        }
      });

     // 3. Histograma
      new Chart(document.getElementById('histogramChart'), {
        type: 'bar',
        data: {
          labels: calcularBins(datosIndividuales),
          datasets: [{
            label: 'Frecuencia',
            data: calcularFrecuencias(datosIndividuales),
            backgroundColor: 'rgba(54, 162, 235, 0.7)',
            borderColor: 'rgba(54, 162, 235, 1)',
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Frecuencia'
              }
            },
            x: {
              title: {
                display: true,
                text: 'Rango de valores'
              }
            }
          },
          plugins: {
            legend: {
              display: false
            },
            tooltip: {
              callbacks: {
                title: (context) => `Rango: ${context[0].label}`,
                label: (context) => `Muestras: ${context.raw}`
              }
            }
          }
        }
      });

      // Función para calcular los bins del histograma
      function calcularBins(data) {
        const min = Math.min(...data);
        const max = Math.max(...data);
        const range = max - min;
        const binCount = Math.ceil(Math.sqrt(data.length));
        const binSize = range / binCount;
        
        const bins = [];
        for (let i = 0; i < binCount; i++) {
          const binStart = min + (i * binSize);
          const binEnd = binStart + binSize;
          bins.push(`${binStart.toFixed(2)} - ${binEnd.toFixed(2)}`);
        }
        
        return bins;
      }

      // Función para calcular las frecuencias del histograma
      function calcularFrecuencias(data) {
        const min = Math.min(...data);
        const max = Math.max(...data);
        const range = max - min;
        const binCount = Math.ceil(Math.sqrt(data.length));
        const binSize = range / binCount;
        
        const frecuencias = Array(binCount).fill(0);
        
        data.forEach(value => {
          const binIndex = Math.min(
            Math.floor((value - min) / binSize),
            binCount - 1
          );
          frecuencias[binIndex]++;
        });
        
        return frecuencias;
      }
    </script>
  <% } %>
</body>
</html>